// Code generated by MockGen. DO NOT EDIT.
// Source: /workspace/messaging/stream.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	broker "stream-messaging/broker"

	gomock "github.com/golang/mock/gomock"
)

// MockStream is a mock of Stream interface.
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream.
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance.
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStream) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStream)(nil).Close))
}

// EnsureStream mocks base method.
func (m *MockStream) EnsureStream(streamName string, subjects []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureStream", streamName, subjects)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureStream indicates an expected call of EnsureStream.
func (mr *MockStreamMockRecorder) EnsureStream(streamName, subjects interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureStream", reflect.TypeOf((*MockStream)(nil).EnsureStream), streamName, subjects)
}

// NewConsumer mocks base method.
func (m *MockStream) NewConsumer(streamName string, cfg broker.ConsumerConfig) (broker.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConsumer", streamName, cfg)
	ret0, _ := ret[0].(broker.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewConsumer indicates an expected call of NewConsumer.
func (mr *MockStreamMockRecorder) NewConsumer(streamName, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConsumer", reflect.TypeOf((*MockStream)(nil).NewConsumer), streamName, cfg)
}

// NewPublisher mocks base method.
func (m *MockStream) NewPublisher(streamName string) (broker.Publisher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPublisher", streamName)
	ret0, _ := ret[0].(broker.Publisher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPublisher indicates an expected call of NewPublisher.
func (mr *MockStreamMockRecorder) NewPublisher(streamName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPublisher", reflect.TypeOf((*MockStream)(nil).NewPublisher), streamName)
}
